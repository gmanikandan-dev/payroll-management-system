# Laravel Payroll Management System - Cursor Rules

## Code Standards & Best Practices

### General Guidelines
- Follow PSR-12 coding standards
- Use meaningful variable and function names
- Write self-documenting code with clear comments
- Keep functions small and focused (single responsibility)
- Use type hints for all parameters and return types
- Prefer composition over inheritance

### Laravel Specific
- Use Eloquent relationships instead of manual joins
- Implement proper validation using Form Requests
- Use Resource classes for API responses
- Follow Laravel naming conventions (PascalCase for classes, camelCase for methods)
- Use dependency injection in controllers
- Implement proper error handling with try-catch blocks
- Use Laravel's built-in features (gates, policies, middleware)

### Database & Models
- Use migrations for all database changes
- Define proper foreign key constraints
- Use soft deletes where appropriate
- Implement proper model relationships
- Use accessors and mutators for data transformation
- Add proper indexes for performance

### Controllers
- Keep controllers thin - delegate business logic to services
- Use single action controllers when appropriate
- Implement proper authorization checks
- Return appropriate HTTP status codes
- Use resource controllers for CRUD operations

### Views & Frontend
- Use Blade components for reusable UI elements
- Implement responsive design with Tailwind CSS
- Use proper semantic HTML
- Implement proper form validation feedback
- Use Alpine.js for interactive components
- Follow accessibility guidelines (WCAG 2.1)

### Security
- Validate all user inputs
- Use CSRF protection on all forms
- Implement proper authorization
- Sanitize data before database operations
- Use prepared statements (Eloquent handles this)
- Implement rate limiting where appropriate

### Performance
- Use eager loading to prevent N+1 queries
- Implement proper caching strategies
- Use database indexes appropriately
- Optimize images and assets
- Use pagination for large datasets
- Implement proper error logging

### Testing
- Write unit tests for business logic
- Write feature tests for user workflows
- Use factories for test data generation
- Mock external services in tests
- Aim for high test coverage

### File Organization
- Group related functionality in modules
- Use proper namespace organization
- Keep configuration files clean and documented
- Use environment variables for sensitive data
- Organize views in logical folder structure

### Documentation
- Document complex business logic
- Use PHPDoc for all public methods
- Keep README updated with setup instructions
- Document API endpoints if applicable
- Include inline comments for complex algorithms

### Git & Version Control
- Write clear, descriptive commit messages
- Use conventional commit format when possible
- Create feature branches for new functionality
- Keep commits atomic and focused
- Write meaningful pull request descriptions

## Project Structure
```
app/
├── Http/
│   ├── Controllers/
│   ├── Middleware/
│   ├── Requests/
│   └── Resources/
├── Models/
├── Services/
├── Policies/
└── Exceptions/

resources/
├── views/
│   ├── components/
│   ├── layouts/
│   └── pages/
├── css/
└── js/

database/
├── migrations/
├── seeders/
└── factories/
```

## Payroll System Specific Rules
- Always validate salary calculations
- Implement audit trails for financial transactions
- Use decimal types for monetary values
- Implement proper date handling for payroll periods
- Ensure data integrity for employee records
- Implement proper backup and recovery procedures
